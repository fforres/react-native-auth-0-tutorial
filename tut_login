(Si te perdiste el capítulo 2 de este tutorial, puedes encontrarlo en este link TK link al cap 2)

Vimos en el post anterior ya sobre el entorno para desarrollar, y como React Native nos entrega una experiencia de desarrollo mucho mejor a la del desarrollo nativo para iOS y Android, asi que manos a la obra!

Carpetas


Actualmente React Native provee de una serie de archivos y carpetas en un proyecto default, con las carpetas ios y android conteniendo los archivos necesarios para correr una aplicacion de android y ios (Concretamente en la carpeta ios existe un proyecto de Xcode, así como en la carpeta android un proyecto Java).

Como nosotros trabajaremos con JavaScript y NodeJS, crearemos algunas carpetas para ordenar nuestro proyecto, con la siguiente estrcutura.

|-ios
|-android
|-src
   |-components
   |-containers
   |-layouts


Pequeña explicación de las carpetas:

Components — Estarán todos los componentes reutilizables y visuales que usaremos en nuestra aplicación.

Containers — Componentes que contengan lógica.

Layouts — Componentes que definan la estructura de la vista que queramos visualizar, puedes considerarlos como las “Rutas” de la aplicación. (La pantalla de configuración, perfil del usuario, login, etc)

Cada una de estas carpetas contienen componentes de React que podemos utilizar. La idea de un proyecto de React (muy simplificadamente) es trabajar con componentes que se generen de otros componentes, así que lo que haremos para visualizar algo es: Cargar una Layout (un Componente que define una ruta), con uno o más Containers (un componente que realiza alguna lógica), y que puede estar compuesto por uno o más Components (un componente que solo interpreta información y dibuja elementos).

PS un layout también puede tener un component dentro.

|-Layout
   |-Component
   |-Container
       |-Component
       |-Component
   |-Container
       |-Component
       |-Component
       |-Component




Componente Login

Ya creado este set de carpetas, procederemos a crear nuestro primer componente, el componente "Login" que permitirá que nuestro usuario se logue a nuestro sistema.

Para esto vamos a crear un archivo "Login.js" en src/components con el siguiente contenido:




```
import React, { Component } from 'react';
import {
  StyleSheet,
  Text,
  View
} from 'react-native';

export default class Login extends Component {
  render() {
    return (
      <View style={styles.container}>
        <Text style={styles.saludo}>
          Hola!
        </Text>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  saludo: {
    fontSize: 40,
    textAlign: 'center'
  }
});
```



Genial! Ya tenemos montado nuestro Login ... pero ahora como lo visualizamos?

Si te fijas, en nuestro emulador de iOS estamos visualizando lo existente en el archivo archivo index.ios.js, nuestro archivo de entrada, así que hace sentido poner nuestro componente de Login ahí.

Dado que el archivo index.ios.js no contiene nuestro componente Login, es necesario importarlo.
Agregando la linea, estarás importando el componente "Login" desde su carpeta (Ojo con los nombres de carpetas)
```
import Login from './src/components/Login';
```


Ahora que ya tenemos el componente importado, nos falta solo "dibujarlo", o hacerlo visible.

Cambia lo que retorna el componente en index.ios.js, en su funcion render, por el componente Login.

```
class reactnativeauth0tutorial extends Component {
  render() {
    return (
      <View style={styles.container}>
        <Login/>
      </View>
    );
  }
}
```

Deberías ver los cambios en el emulador, caso contrario es posible que React Native no considerase las nuevas carpetas y archivos, por lo que si reinicias el Emulador, todo debería funcionar.
